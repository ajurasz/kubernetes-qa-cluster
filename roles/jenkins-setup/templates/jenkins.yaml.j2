apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jenkins
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get","list","watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jenkins
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins
subjects:
- kind: ServiceAccount
  name: jenkins
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: jenkins
  labels:
    app: jenkins
    type: ci
spec:
  storageClassName: manual
  capacity:
    storage: "{{ jenkins_master_storage_size_gb }}Gi"
  accessModes:
    - ReadWriteOnce
  nfs:
    server: {{ hostvars['master'].ansible_host }}
    path: "/srv/nfs/kubedata/jenkins-master"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: jenkins-agent
  labels:
    app: jenkins
    type: ci
spec:
  storageClassName: manual
  capacity:
    storage: "{{ jenkins_agent_storage_size_gb }}Gi"
  accessModes:
    - ReadWriteMany
  nfs:
    server: {{ hostvars['master'].ansible_host }}
    path: "/srv/nfs/kubedata/jenkins-agent"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins
  labels:
    app: jenkins
    type: ci
spec:
  storageClassName: manual
  volumeName: jenkins
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "{{ jenkins_master_storage_size_gb }}Gi"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-agent
  labels:
    app: jenkins
    type: ci
spec:
  storageClassName: manual
  volumeName: jenkins-agent
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: "{{ jenkins_agent_storage_size_gb }}Gi"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  labels:
    app: jenkins
    type: ci
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
        type: ci
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: pool
                operator: In
                values:
                - jenkins
      tolerations:
        - key: pool
          operator: Equal
          value: jenkins
          effect: NoSchedule          
      securityContext:
        runAsUser: 0
        fsGroup: 1000 
      serviceAccountName: jenkins   
      containers:
        - name: jenkins
          image: "jenkins/jenkins:{{ jenkins_master_version }}"
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 8080
            - containerPort: 50000
          volumeMounts:
            - mountPath: /var/jenkins_home
              name: jenkins-home
          resources:
            limits:
              cpu: "1"
              memory: 2Gi
            requests:
              cpu: "1"
              memory: 1024Mi
          env:
            - name: JAVA_OPTS
              value: "-Xms1024m -Xmx2g"
      volumes:
        - name: jenkins-home
          persistentVolumeClaim:
            claimName: jenkins
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins
  labels:
    app: jenkins
    type: ci
spec:
  type: NodePort
  ports:
   - port: 8080
     nodePort: 30001
  selector:
   app: jenkins
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins-agent
  labels:
    app: jenkins
    type: ci
spec:
  ports:
   - port: 50000
     targetPort: 50000
  selector:
   app: jenkins   
